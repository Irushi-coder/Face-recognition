from ultralytics import YOLO
import cv2
from mtcnn import MTCNN
from keras.models import load_model
import numpy as np
from numpy.linalg import norm

# Load YOLOv8 model for face detection
model = YOLO('yolov8n-face.pt')  # Ensure you have this model downloaded

# Load an image
image_path = 'path_to_image.jpg'
img = cv2.imread(image_path)

# Perform face detection
results = model(img)
boxes = results.xyxy[0].cpu().numpy()  # Extract bounding boxes

# Initialize MTCNN for face alignment
detector = MTCNN()

# Extract and align faces
aligned_faces = []
for box in boxes:
    x1, y1, x2, y2, conf = map(int, box)
    face_img = img[y1:y2, x1:x2]
    faces = detector.detect_faces(face_img)
    for face in faces:
        x, y, width, height = face['box']
        aligned_face = face_img[y:y+height, x:x+width]
        aligned_faces.append(aligned_face)

# Load ArcFace model for feature extraction
arcface_model = load_model('path_to_arcface_model.h5')

# Preprocess image for ArcFace
def preprocess(face_img):
    face_img = cv2.resize(face_img, (112, 112))
    face_img = face_img.astype('float32') / 255.0
    face_img = np.expand_dims(face_img, axis=0)
    return face_img

# Extract features
feature_vectors = []
for face_img in aligned_faces:
    preprocessed_img = preprocess(face_img)
    feature_vector = arcface_model.predict(preprocessed_img)
    feature_vectors.append(feature_vector)

# Function to calculate cosine similarity
def cosine_similarity(v1, v2):
    return np.dot(v1, v2.T) / (norm(v1) * norm(v2))

# Example: Compare first two extracted features if available
if len(feature_vectors) > 1:
    similarity = cosine_similarity(feature_vectors[0], feature_vectors[1])
    print(f'Cosine Similarity: {similarity[0][0]}')
else:
    print('Not enough faces detected for comparison.')
